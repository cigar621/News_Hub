{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests \n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "# There are two inputs: {keyword} and {the number of results}\n",
    "## Add a date range input?\n",
    "def News_Hub():\n",
    "    \n",
    "    print('Welcome to News Hub, News Hub will fetch you the news from Wall Street Journal \\\n",
    "NY Times and Yahoo News')\n",
    "    keyword = input('Please enter your keyword: ')\n",
    "    limit_no = int(input('How many results do you want from each site? '))\n",
    "    \n",
    "    def searchonwsj(keyword,limit_no):\n",
    "        website = 'http://www.wsj.com'\n",
    "        # If we only have a keyword as criteria, the search results might be the articles that contain the keyword \n",
    "        # but are not related to the keyword. So 'meta' is added.\n",
    "        wsjsearch = f'https://www.wsj.com/search/term.html?KEYWORDS={keyword}&meta={keyword}&source=wsjarticle,wsjblogs,wsjvideo,interactivemedia,sitesearch,wsjpro'\n",
    "        html = requests.get(wsjsearch)\n",
    "        c = html.content\n",
    "        bs = BeautifulSoup(c, 'lxml' )\n",
    "        headlines = bs.find_all('h3', class_='headline',limit = limit_no)\n",
    "        summary_list = bs.find_all(class_='summary-container',limit = limit_no)\n",
    "        # add a timestamp for the news \n",
    "        timestamp = list(map(lambda x: x.get_text(), bs.find_all('time')))\n",
    "        print('\\nReturning search result from Wall Street Journal...')\n",
    "        \n",
    "        # return headline, summary, and hyperlink\n",
    "        for i,headline in enumerate(headlines):\n",
    "            headlinetext = headline.find('a').get_text()\n",
    "            summary = summary_list[i].find('p').get_text()\n",
    "            headlinelink = headline.find('a', href = True)\n",
    "            headlinelink = website + headlinelink['href']\n",
    "            print(headlinetext+'       {}'.format(timestamp[i]))\n",
    "            print(headlinelink)\n",
    "            print('\\n'+summary+'\\n')\n",
    "        \n",
    "    searchonwsj(keyword,limit_no)\n",
    "        \n",
    "        \n",
    "    def searchonnyt(keyword, limit_no):\n",
    "        website = 'http://nytimes.com'\n",
    "        nytsearch = f'https://www.nytimes.com/search?query={keyword}&sort=best'\n",
    "        html = requests.get(nytsearch)\n",
    "        c = html.content\n",
    "        bs = BeautifulSoup(c,'lxml')\n",
    "        headlines = bs.find_all('a',href = True)\n",
    "        print('\\nReturning search result from NY Times...')\n",
    "        rcount = 0\n",
    "        for headline in headlines:\n",
    "            if rcount < limit_no:\n",
    "                r = headline.find('h4')\n",
    "                if r == None:\n",
    "                    pass\n",
    "                else:\n",
    "                    rcount += 1\n",
    "                    print(r.get_text())\n",
    "                    print(website+headline['href'])\n",
    "            \n",
    "    searchonnyt(keyword,limit_no)\n",
    "    \n",
    "    def searchonyahoo(keyword,limit_no):\n",
    "        yahoosearch = f'https://news.search.yahoo.com/search?p={keyword}'\n",
    "        html = requests.get(yahoosearch)\n",
    "        c = html.content\n",
    "        bs = BeautifulSoup(c,'lxml')\n",
    "        headlines = bs.find_all('h4',{'class':'fz-16 lh-20'},limit = limit_no)\n",
    "        print('\\nReturning search result from Yahoo News...')\n",
    "        for headline in headlines:\n",
    "            headlinetext = headline.get_text()\n",
    "            r = headline.find('a',href = True)\n",
    "            headlinelink = r['href']\n",
    "            print(headline.get_text())\n",
    "            print(headlinelink)\n",
    "        \n",
    "    searchonyahoo(keyword,limit_no)\n",
    "\n",
    "News_Hub()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
